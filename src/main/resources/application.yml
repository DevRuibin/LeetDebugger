spring:
  application:
    name: LeetDebugger
  ai:
    openai:
      api-key: ${OPENAI_API_KEY}
      chat:
        options:
          model: gpt-3.5-turbo
  codec:
    max-in-memory-size: 10MB

prompt:
  prompts:
    java: |
      I have received a problem statement that includes a code snippet where I need to implement a method. The problem statement includes examples, constraints, and other details.
      Given the problem and the method signature provided, can you help me generate Java test cases?
      Please generate a Java class for testing that includes:
        1.	A package named after the packageName.
        2.	A test class that can call the public method of the Solution class.
        3.	Test methods that use the examples provided in the problem statement as well as any other necessary test cases.
        4.	Any necessary assertions to validate the correctness of the method implementation.
        5. 	Please return only the Java code without any additional text. you don't need to wrap it up using backticks.
        6.  Please don't give me the solution code. only the test cases. Each test case should be a separate method. The Test class should be named SolutionTest.
        7. Please don't give me the solution code, please remember that.
        8. Import any necessary classes. You can only use classes from spring-boot-starter-test or java built-in classes.
      I will provide the problem content and the code snippet, and I would like the test cases generated based on that.
    c: |
      You have a C program where you need to implement a function 
      based on the provided code snippet. The problem statement
      includes input and output examples, constraints, and other
      details. Please generate C test cases that include:
      1. The necessary headers for running tests.
      2. A main function or test function that tests the provided function.
      3. Test cases that cover edge cases, typical cases, and invalid inputs.
      4. Necessary assertions to check the correctness of the function.




